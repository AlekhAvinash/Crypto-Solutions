from pwn import *
from Crypto.Util.Padding import pad, unpad
from binascii import unhexlify,hexlify

byte_xor = lambda ba1, ba2: bytes([i^j for i, j in zip(ba1, ba2)])

host = 'jh2i.com'
port = 50028

# finds all 3 possible outputs of first block
def gen():
	blocks = []
	while len(blocks)!=3:
		conn = remote(host, port)
		ct_block = unhexlify(conn.recvline().decode('utf-8')[:-1])[:16]
		conn.close()
		if ct_block not in blocks:
			blocks += [ct_block]
	return blocks 

# decrypt the flag by xorring out m(t) and then find remaining 2 blocks
def decrypt(blocks):
	last_block = pad(b'a' * 32 + b'}', 16)[-16:]
	flag = [b'',b'', last_block]
	xorred_blocks = [bytes(byte_xor(blocks[i], blocks[(i+1)%3])) for i in range(len(blocks))]
	for i in range(3):
		dec_block = byte_xor(xorred_blocks[i], last_block)
		if b'flag' in dec_block:
			flag[0] = dec_block
		elif b'\x00' not in dec_block:
			flag[1] = dec_block
		else:
			pass
	return unpad(b''.join(flag), 16).decode('utf-8')

def main():
	ct_block = gen()
	flag = decrypt(ct_block)
	print(flag)

if __name__=='__main__':
	main()
